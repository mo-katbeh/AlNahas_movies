/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutWatchlistRouteImport } from './routes/_layout/watchlist'
import { Route as LayoutUserProfileRouteImport } from './routes/_layout/userProfile'
import { Route as LayoutMoviesRouteImport } from './routes/_layout/movies'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutWatchlistRoute = LayoutWatchlistRouteImport.update({
  id: '/watchlist',
  path: '/watchlist',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutUserProfileRoute = LayoutUserProfileRouteImport.update({
  id: '/userProfile',
  path: '/userProfile',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutMoviesRoute = LayoutMoviesRouteImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/movies': typeof LayoutMoviesRoute
  '/userProfile': typeof LayoutUserProfileRoute
  '/watchlist': typeof LayoutWatchlistRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/movies': typeof LayoutMoviesRoute
  '/userProfile': typeof LayoutUserProfileRoute
  '/watchlist': typeof LayoutWatchlistRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_layout/movies': typeof LayoutMoviesRoute
  '/_layout/userProfile': typeof LayoutUserProfileRoute
  '/_layout/watchlist': typeof LayoutWatchlistRoute
  '/_layout/': typeof LayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/signup'
    | '/movies'
    | '/userProfile'
    | '/watchlist'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/movies' | '/userProfile' | '/watchlist' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/signup'
    | '/_layout/movies'
    | '/_layout/userProfile'
    | '/_layout/watchlist'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/watchlist': {
      id: '/_layout/watchlist'
      path: '/watchlist'
      fullPath: '/watchlist'
      preLoaderRoute: typeof LayoutWatchlistRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/userProfile': {
      id: '/_layout/userProfile'
      path: '/userProfile'
      fullPath: '/userProfile'
      preLoaderRoute: typeof LayoutUserProfileRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/movies': {
      id: '/_layout/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof LayoutMoviesRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutMoviesRoute: typeof LayoutMoviesRoute
  LayoutUserProfileRoute: typeof LayoutUserProfileRoute
  LayoutWatchlistRoute: typeof LayoutWatchlistRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutMoviesRoute: LayoutMoviesRoute,
  LayoutUserProfileRoute: LayoutUserProfileRoute,
  LayoutWatchlistRoute: LayoutWatchlistRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
